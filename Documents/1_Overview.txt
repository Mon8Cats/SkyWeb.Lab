Contents 

1) Catalog microservice which includes;
    ASP.NET Core Web API application
    REST API principles, CRUD operations
    MongoDB NoSQL database connection on docker containerization
    N-Layer implementation with Repository Pattern
    Swagger Open API implementation
    Dockerfile and docker-compose implementation

2) Basket microservice which includes;
    ASP.NET Core Web API application
    REST API principles, CRUD operations
    Redis database connection on docker containerization
    Consume Discount Grpc Service for inter-service sync communication to calculate product final price
    Publish BasketCheckout Queue with using MassTransit and RabbitMQ
    Swagger Open API implementation
    Dockerfile and docker-compose implementation

3) Discount microservice which includes;
    ASP.NET Grpc Server application
    Build a Highly Performant inter-service gRPC Communication with Basket Microservice
    Exposing Grpc Services with creating Protobuf messages
    Using Dapper for micro-orm implementation to simplify data access and ensure high performance
    PostgreSQL database connection and containerization
    Dockerfile and docker-compose implementation

4) Microservices Communication
    Sync inter-service gRPC Communication
    Async Microservices Communication with RabbitMQ Message-Broker Service
    Using RabbitMQ Publish/Subscribe Topic Exchange Model
    Using MassTransit for abstraction over RabbitMQ Message-Broker system
    Publishing BasketCheckout event queue from Basket microservices and Subscribing this event from Ordering microservices
    Create RabbitMQ EventBus.Messages Common Class Library and add references Microservices

5) Ordering microservice which includes;
    ASP.NET Core Web API application
    Implementing DDD, CQRS and Clean Architecture with using Best Practices
    Developing CQRS with using MediatR, FluentValidation and AutoMapper nuget packages
    Consuming RabbitMQ BasketCheckout event queue with using MassTransit-RabbitMQ Configuration
    SqlServer database connection and containerization
    Using Entity Framework Core ORM and auto migrate to SqlServer when application Startup
    Swagger Open API implementation
    Dockerfile and docker-compose implementation

6) API Gateway Ocelot microservice which includes;
    Implement API Gateways with Ocelot
    Sample microservices/containers to reroute through the API Gateways
    Run multiple different API Gateway/BFF container types
    The Gateway aggregation pattern in Shopping.Aggregator
    Dockerfile and docker-compose implementation

7) WebUI ShoppingApp microservice which includes;
    ASP.NET Core Web Application with Bootstrap 4 and Razor template
    Call Ocelot APIs with HttpClientFactory and Polly
    Aspnet core razor tools â€” View Components, partial Views, Tag Helpers, Model Bindings and Validations, Razor Sections etc..
    Dockerfile and docker-compose implementation
    
8) Microservices Cross-Cutting Implementations
    Implementing Centralized Distributed Logging with Elastic Stack (ELK); Elasticsearch, Logstash, Kibana and SeriLog for Microservices
    Use the HealthChecks feature in back-end ASP.NET microservices
    Using Watchdog in separate service that can watch health and load across services, and report health about the microservices by querying with the HealthChecks

9) Microservices Resilience Implementations
    Making Microservices more resilient Use IHttpClientFactory to implement resilient HTTP requests
    Implement Retry and Circuit Breaker patterns with exponential backoff with IHttpClientFactory and Polly policies

10) Ancillary Containers
    Use Portainer for Container lightweight management UI which allows you to easily manage your different Docker environments
    pgAdmin PostgreSQL Tools feature rich Open Source administration and development platform for PostgreSQL
    
11) Docker Compose establishment with all microservices on docker;
    Containerization of microservices
    Containerization of databases
    Override Environment variables

12) https://github.com/aspnetrun/run-aspnetcore-microservices 
